buildscript {
	ext {
		springBootVersion = '2.7.2-SNAPSHOT'
	}
	repositories {
		mavenCentral()
		maven { url 'https://repo.spring.io/milestone' }
		maven { url 'https://repo.spring.io/snapshot' }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
		classpath "io.spring.gradle:dependency-management-plugin:1.0.12.RELEASE"
	}
}

//root 도하고 싶다면 sub>all 변경
subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	group = 'com.example'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '1.8'

	repositories {
		mavenCentral()
		maven { url 'https://repo.spring.io/milestone' }
		maven { url 'https://repo.spring.io/snapshot' }
	}
	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	//공통
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		compileOnly 'org.projectlombok:lombok'

		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'

	}

	tasks.named('test') {
		useJUnitPlatform()
	}

}


project(':demo.service') {
	// user 모듈에만 필요한 라이브러리가 발생하면 이곳에 추가한다.
	dependencies {
//		compileOnly project(':demo.db')

		//의존성 추가
		implementation project(':demo.db')

	}
}



